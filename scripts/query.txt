MATCH (startNode {name: "horse"}), (endNode:ARTIST {name: "Pablo_Picasso"})
MATCH path = shortestPath((startNode)-[*]-(endNode))
RETURN nodes(path), relationships(path)

===

MATCH (artist:ARTIST {name: "Pablo_Picasso"})<-[relationship]-(event:EVENT)
MATCH (event)-[outgoing_rel]->(end_node)
WITH event, COUNT(outgoing_rel) AS outgoingCount
ORDER BY outgoingCount DESC
LIMIT 10
MATCH (event)-[outgoing_rel]->(end_node)
RETURN event, outgoing_rel, end_node

===

MATCH (artist:ARTIST {name: "Pablo_Picasso"})<-[relationship]-(event:EVENT)
MATCH (event)-[out]->(end_node)
WITH event, COUNT(out) AS outgoingCount
ORDER BY outgoingCount DESC
LIMIT 1
RETURN end_node

===

MATCH (artist:ARTIST {name: "Pablo_Picasso"}) <- [relationship] - (event: EVENT)

WITH artist, event, COUNT(*) AS eventCount
ORDER BY eventCount DESC
LIMIT 5
RETURN artist, event, eventCount

===

MATCH (artist:ARTIST {name: "Pablo_Picasso"})-[relationship]->(event:EVENT)
WITH artist, event, COUNT(*) AS eventCount
ORDER BY eventCount DESC
LIMIT 5
RETURN artist, event, eventCount

===
ROLE: Remove start_node, end_node, and relationship

MATCH (n {name: 'Basel_citizens'})
OPTIONAL MATCH (n)-[r]-(c)
RETURN n, r, c

===
ROLE: merge nodes with same name

MATCH (n {name: 'Spaniards'})
WITH collect(n) AS nodes
CALL apoc.refactor.mergeNodes(nodes, {properties:'discard', label: 'GROUP', mergeRels:true})
YIELD node
RETURN node

===
ROLE: Find duplicated nodes with as event

MATCH (n:EVENT)
WHERE size(labels(n)) > 1
RETURN n

===
ROLE: Find all simple path with distance of 3 between two nodes

MATCH (startNode {name: "Pablo_Picasso"}), (endNode {name: "bull"})
CALL apoc.algo.allSimplePaths(startNode, endNode, '', 3) YIELD path
RETURN path
LIMIT 10;